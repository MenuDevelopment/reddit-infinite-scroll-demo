{"version":3,"sources":["RedditListItem.jsx","RedditListContainer.jsx","useRedditSearch.jsx","App.js","index.js"],"names":["itemStyle","boxShadow","width","margin","display","flexDirection","alignItems","titleStyle","RedditListItem","post","title","thumbnail","subreddit","permalink","style","href","rel","target","className","src","alt","BASE_URL","RedditListContainer","useState","redditUrl","setRedditUrl","loading","setLoading","posts","setPosts","after","setAfter","useEffect","axios","get","then","response","data","children","map","prevPosts","useRedditSearch","observer","useRef","lastPostRef","useCallback","element","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","index","length","ref","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAEMA,EAAY,CACdC,UAAW,sCACXC,MAAO,MACPC,OAAQ,MACRC,QAAS,OACTC,cAAe,SACfC,WAAY,UAIVC,EAAa,GAMJ,SAASC,EAAT,GAAiC,IAARC,EAAO,EAAPA,KAC7BC,EAA2CD,EAA3CC,MAAOC,EAAoCF,EAApCE,UAAWC,EAAyBH,EAAzBG,UAAWC,EAAcJ,EAAdI,UACpC,OACI,yBAAKC,MAAOd,GACR,uBAAGc,MAAOP,EAAYQ,KAAMF,EAAWG,IAAI,sBAAsBC,OAAO,UAAUP,GAClF,yBAAKQ,UAAU,eACX,yBAAKC,IAAKR,EAAWS,IAAI,8BAE7B,8DAAgCR,GAAhC,KACA,8B,4BCvBZ,IAAMS,EAAW,wCAIF,SAASC,IAAuB,IAAD,EAERC,mBAASF,GAFD,mBAEnCG,EAFmC,KAExBC,EAFwB,OCL/B,SAA2BD,GAAW,IAAD,EAClBD,oBAAS,GADS,mBACzCG,EADyC,KAChCC,EADgC,OAEtBJ,mBAAS,IAFa,mBAEzCK,EAFyC,KAElCC,EAFkC,OAGtBN,mBAAS,IAHa,mBAGzCO,EAHyC,KAGlCC,EAHkC,KAsBhD,OAjBAC,qBAAU,WACNL,GAAW,GACXM,IAAMC,IAAIV,GAAWW,MAAK,SAAAC,GAAa,IAAD,EAC5BC,EAAI,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAUC,YAAb,aAAG,EAAgBA,KAC7BN,EAASM,EAAKP,OACd,IAAMF,EAAQS,EAAKC,SAASC,KAAI,SAAA9B,GAAS,IAAD,EACEA,EAAK4B,KAApC3B,EAD6B,EAC7BA,MAAOC,EADsB,EACtBA,UAAWC,EADW,EACXA,UACpBC,EAAaJ,EAAK4B,KAAlBxB,UAEL,MAAO,CAACH,QAAOC,YAAWC,YAAWC,UADrCA,EAAY,0BAA4BA,MAI5CgB,GAAS,SAAAW,GAAS,4BAAQA,GAAR,YAAsBZ,UAG5CD,GAAW,KACZ,CAACH,IACG,CAACE,UAASE,QAAOE,SDdQW,CAAgBjB,GAAzCE,EAHmC,EAGnCA,QAASE,EAH0B,EAG1BA,MAAOE,EAHmB,EAGnBA,MAEjBY,EAAWC,mBAEXC,EAAcC,uBAAY,SAAAC,GACxBpB,IAGAgB,EAASK,SACTL,EAASK,QAAQC,aAErBN,EAASK,QAAU,IAAIE,sBAAqB,SAAAC,GACpCA,EAAQ,GAAGC,iBAAmBzB,GAC9BD,EAAaJ,EAAQ,iBAAaS,OAGtCgB,GACAJ,EAASK,QAAQK,QAAQN,MAE9B,CAAChB,EAAOJ,IAGX,OACI,6BACKE,EAAMW,KAAI,SAAC9B,EAAM4C,GACd,OAAIA,IAAUzB,EAAM0B,OAAQ,EAEpB,yBAAKC,IAAKX,EAAaY,IAAK/C,EAAKC,OAC7B,kBAACF,EAAD,CAAgBC,KAAMA,EAAM+C,IAAK/C,EAAKC,SAI3C,kBAACF,EAAD,CAAgBC,KAAMA,EAAM+C,IAAK/C,EAAKC,YEhC9C+C,MARf,WACE,OACE,6BACE,kBAACnC,EAAD,QCFNoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0e14fdfd.chunk.js","sourcesContent":["import React from 'react'\n\nconst itemStyle = {\n    boxShadow: '4px 4px 1px 1px rgba(0, 0, 255, .2)',\n    width: '25%',\n    margin: '8px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n\n}\n\nconst titleStyle = {\n\n}\n\n//requires Title, Thumbnail, and original subreddit\n//title should be link to original post\nexport default function RedditListItem({post}) {\n    const {title, thumbnail, subreddit, permalink } = post\n    return (\n        <div style={itemStyle}>\n            <a style={titleStyle} href={permalink} rel=\"noopener noreferrer\" target=\"_blank\">{title}</a>\n            <div className='imageHolder'>\n                <img src={thumbnail} alt=\"Thumbnail failed to load\" />\n            </div>\n            <div>{`Originally posted to r/${subreddit}`} </div>\n            <br/>\n        </div>\n    )\n}\n","import React, {useState, useRef, useCallback} from 'react'\nimport RedditListItem from './RedditListItem'\nimport useRedditSearch from './useRedditSearch'\n\nconst BASE_URL = 'https://www.reddit.com/r/aww/top.json'\n\n\n\nexport default function RedditListContainer() {\n\n    const [redditUrl, setRedditUrl] = useState(BASE_URL)\n    const {loading, posts, after} = useRedditSearch(redditUrl)\n\n    const observer = useRef()\n\n    const lastPostRef = useCallback(element =>{\n        if (loading){\n            return\n        }\n        if (observer.current){\n            observer.current.disconnect()\n        }\n        observer.current = new IntersectionObserver(entries => {\n            if (entries[0].isIntersecting && !loading) {\n                setRedditUrl(BASE_URL + `?after=${after}`)\n            }\n        })\n        if (element) {\n            observer.current.observe(element)\n        }\n    }, [after, loading])\n\n\n    return (\n        <div>\n            {posts.map((post, index) => {\n                if (index === posts.length -1){\n                    return( \n                        <div ref={lastPostRef} key={post.title} >\n                            <RedditListItem post={post} key={post.title} />\n                        </div>\n                    )\n                }\n                return <RedditListItem post={post} key={post.title}/>\n            })}\n        </div>\n    )\n}\n","import {useEffect, useState} from 'react'\nimport axios from 'axios'\n\nexport default function useRedditSearch ( redditUrl){\n    const [loading, setLoading] = useState(true)\n    const [posts, setPosts] = useState([])\n    const [after, setAfter] = useState('')\n\n    useEffect(()=>{\n        setLoading(true)\n        axios.get(redditUrl).then(response => {\n            const data = response?.data?.data\n            setAfter(data.after)\n            const posts = data.children.map(post => {\n                const {title, thumbnail, subreddit} = post.data\n                let {permalink} = post.data\n                permalink = 'https://www.reddit.com/' + permalink\n                return {title, thumbnail, subreddit, permalink}\n                \n            })\n            setPosts(prevPosts => [...prevPosts, ...posts])\n\n        })\n        setLoading(false)\n    }, [redditUrl])\n    return {loading, posts, after}\n}","import React from 'react';\nimport RedditListContainer from './RedditListContainer'\n\nfunction App() {\n  return (\n    <div>\n      <RedditListContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}